3/13/15
In dealing with the validation messages, I've found it may be desirable to allow
the use of objects with named properties (ie, 1-D arrays with named indexes).

This would require a change to the way repeats are interpolated; namely the 'for'
loop would have to be changed to a 'for-in.' This is possible w/o substantial
disruption, but for now I am goin to leave it.

It should also be noted that I made a change to the way DOM.isVisble() determines
visibility. This in turn affects the nodeTable. With repeats, this function is 
used to determine whether nodes get put on the table and hence the change is 
blowing up nodeTable regression tests. In light of the fact that the change affects 
nothing else, I may just change tests to reflect the 'new normal.' 

3/15/15

I am still on the 'component' branch. I guess I'll just continue the demo work
on this branch. I don't think any of this should be merged into master until the
tests are written; however, this branch should be merged into test after the demo is 
done.

Here are a couple of things that I feel should be added, based on limitations I'm 
hitting during construction of the demo:

1. UI States
2. Working browser forward/back navigation

3/18/15

Found serious problem with route resolution algo. HAs to do with a node spawning 
multiple NT branches. Currently the algo despends on the use of lookaheads to know
where to go next; however, this breaks down in the case of multiple branches b/c
I'm limited to a single lookahead. The route itself can't tell me which of the possible
branches to take b/c the route parts are anonymous data. Gotta sleep on it.

3/20/15

attributes on button not interping correctly. I think it's b/c they aren't a recognized node
and aren't getting cached. will work tomorrow.

3/22/15

Started UI states. 

TEST NOTE: I have not tested that infinite route deference depth works.  

Fallback property for routes now allows for fallbacks to 2 scenarios:
1. partial not found (404)
2. target node not found

TEST NOTE: theoretically fallback properties should be treated as partials. Meaning
they can be composed of a single route name or an array with a mix of route names
and route definition objects. UNTESTED.